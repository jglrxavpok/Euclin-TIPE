var memoire = new Int[30000]
var pointeur = 0

var code = readFile("brainfuck/factorials.bf")
var pileAppels = new Int[256]
var pointeurRetour = 0

func trouveIndiceCrochetFermant(indiceOuvrant: Int, code: String): Int {
    var somme = 1
    // suppose que le code est bien parenthésé!
    indiceOuvrant = indiceOuvrant+1
    while(somme != 0) {
        indiceOuvrant = indiceOuvrant+1
        var c = code.charAt(indiceOuvrant <- Int32)
        if(c == '[')  {
            somme = somme+1
        } else {
            if(c == ']')  {
                somme = somme-1
            }
        }
    }
    return indiceOuvrant
}

func instruction(caractere: Char, indice: Int, code: String): Int {
    if(caractere == '+') {
        memoire[pointeur] = memoire[pointeur] +1
    }
    if(caractere == '-') {
        memoire[pointeur] = memoire[pointeur] -1
    }
    if(caractere == '>') {
        pointeur = pointeur +1
    }
    if(caractere == '<') {
        pointeur = pointeur -1
    }

    if(caractere == '.') {
        writeChar(memoire[pointeur] <- Char)
    }

    if(caractere == ',') {
        memoire[pointeur] = readChar() <- Int
    }

    if(caractere == '[') {
        var saute = memoire[pointeur] == 0
        if(saute) {
            return trouveIndiceCrochetFermant(indice, code)+1
        } else {
            pileAppels[pointeurRetour] = indice
            pointeurRetour = pointeurRetour+1
        }
    }

    if(caractere == ']') {
        var valeur = memoire[pointeur]
        pointeurRetour = pointeurRetour -1
        if(valeur == 0) {
            // on fait rien
        } else {
            return pileAppels[pointeurRetour] // on retourne à la position du début de boucle
        }
    }

    return indice+1 // par défaut on avance d'un pas
}

func execute(code: String): Unit {
    var caracteres = code.toCharArray()
    var taille = caracteres.length <- Int64
    var indice = 0
    while(indice < taille) {
        var caractere = caracteres[indice]
        indice = instruction(caractere, indice, code)
    }
}

execute(code)